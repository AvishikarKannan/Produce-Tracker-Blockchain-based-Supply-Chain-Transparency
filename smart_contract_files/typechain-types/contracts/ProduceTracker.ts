/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ProduceTracker {
  export type UpdateStruct = {
    status: BigNumberish;
    action: string;
    location: string;
    actor: AddressLike;
    timestamp: BigNumberish;
  };

  export type UpdateStructOutput = [
    status: bigint,
    action: string,
    location: string,
    actor: string,
    timestamp: bigint
  ] & {
    status: bigint;
    action: string;
    location: string;
    actor: string;
    timestamp: bigint;
  };
}

export interface ProduceTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProduce"
      | "addUpdate"
      | "getHistory"
      | "getProduce"
      | "owner"
      | "renounceOwnership"
      | "totalProduces"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProduceAdded"
      | "ProduceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProduce",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addUpdate",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalProduces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addProduce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHistory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProduce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalProduces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProduceAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    origin: string,
    price: BigNumberish,
    farmer: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    origin: string,
    price: bigint,
    farmer: string
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    origin: string;
    price: bigint;
    farmer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProduceUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    status: BigNumberish,
    action: string,
    location: string,
    actor: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    status: bigint,
    action: string,
    location: string,
    actor: string
  ];
  export interface OutputObject {
    id: bigint;
    status: bigint;
    action: string;
    location: string;
    actor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProduceTracker extends BaseContract {
  connect(runner?: ContractRunner | null): ProduceTracker;
  waitForDeployment(): Promise<this>;

  interface: ProduceTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProduce: TypedContractMethod<
    [name: string, origin: string, price: BigNumberish, location: string],
    [void],
    "nonpayable"
  >;

  addUpdate: TypedContractMethod<
    [id: BigNumberish, status: BigNumberish, action: string, location: string],
    [void],
    "nonpayable"
  >;

  getHistory: TypedContractMethod<
    [id: BigNumberish],
    [ProduceTracker.UpdateStructOutput[]],
    "view"
  >;

  getProduce: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, string, string, bigint, bigint]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalProduces: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProduce"
  ): TypedContractMethod<
    [name: string, origin: string, price: BigNumberish, location: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUpdate"
  ): TypedContractMethod<
    [id: BigNumberish, status: BigNumberish, action: string, location: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getHistory"
  ): TypedContractMethod<
    [id: BigNumberish],
    [ProduceTracker.UpdateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProduce"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[bigint, string, string, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalProduces"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProduceAdded"
  ): TypedContractEvent<
    ProduceAddedEvent.InputTuple,
    ProduceAddedEvent.OutputTuple,
    ProduceAddedEvent.OutputObject
  >;
  getEvent(
    key: "ProduceUpdated"
  ): TypedContractEvent<
    ProduceUpdatedEvent.InputTuple,
    ProduceUpdatedEvent.OutputTuple,
    ProduceUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProduceAdded(uint256,string,string,uint256,address)": TypedContractEvent<
      ProduceAddedEvent.InputTuple,
      ProduceAddedEvent.OutputTuple,
      ProduceAddedEvent.OutputObject
    >;
    ProduceAdded: TypedContractEvent<
      ProduceAddedEvent.InputTuple,
      ProduceAddedEvent.OutputTuple,
      ProduceAddedEvent.OutputObject
    >;

    "ProduceUpdated(uint256,uint8,string,string,address)": TypedContractEvent<
      ProduceUpdatedEvent.InputTuple,
      ProduceUpdatedEvent.OutputTuple,
      ProduceUpdatedEvent.OutputObject
    >;
    ProduceUpdated: TypedContractEvent<
      ProduceUpdatedEvent.InputTuple,
      ProduceUpdatedEvent.OutputTuple,
      ProduceUpdatedEvent.OutputObject
    >;
  };
}
